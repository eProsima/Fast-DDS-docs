.. _writing_pubsub_python_datatype:

Build the topic data type
^^^^^^^^^^^^^^^^^^^^^^^^^

*eProsima Fast DDS-Gen* is a Java application that generates source code using the data types defined in an
Interface Description Language (IDL) file.
This application can do two different things:

1. Generate C++ definitions for your custom topic.
2. Generate `SWIG`_ interface files to generate the Python bindings for your custom topic.

For this project, we will use the Fast DDS-Gen application to define the data type of the messages that will be sent
by the publishers and received by the subscribers.

In the workspace directory, execute the following commands:

.. code-block:: bash

    touch HelloWorld.idl

This creates the HelloWorld.idl file.
Open the file in a text editor and copy and paste the following snippet of code.

.. code-block:: omg-idl

    struct HelloWorld
    {
        unsigned long index;
        string message;
    };

By doing this we have defined the ``HelloWorld`` data type, which has two elements: an *index* of type ``uint32_t``
and a *message* of type ``std::string``.
All that remains is to generate the source code that implements this data type in C++11 and the
`SWIG`_ interface files for the Python bindings.
To do this, run the following command.

.. code-block:: bash

    <path/to/Fast DDS-Gen>/scripts/fastddsgen -python HelloWorld.idl

This must have generated the following files:

* HelloWorld.hpp: HelloWorld C++ type definition.
* HelloWorld.i: `SWIG`_ interface file for HelloWorld C++ type definition.
* HelloWorldPubSubTypes.cxx: C++ interface used by Fast DDS to support HelloWorld type.
* HelloWorldPubSubTypes.h: C++ header file for HelloWorldPubSubTypes.cxx.
* HelloWorldPubSubTypes.i: `SWIG`_ interface file for C++ Serialization and Deserialization code.
* HelloWorldCdrAux.ipp: C++ serialization and deserialization code for the HelloWorld type.
* HelloWorldCdrAux.hpp: C++ header file for HelloWorldCdrAux.ipp.
* HelloWorldTypeObjectSupport.cxx: |TypeObject| registration code.
* HelloWorldTypeObjectSupport.hpp: Header file for HelloWorldTypeObjectSupport.cxx.
* CMakeLists.txt: CMake file to generate C++ source code and Python module from the `SWIG`_ interface files,
  compile and generate C++ libraries.

After that, the python bindings can be generated by running the following command.

.. code-block:: bash

    cmake .
    make

This must have generated the python bindings HelloWorld.py along with the corresponding the C++ libraries, _HelloWorldWrapper.so and libHelloWorld.so

.. note::

    If the user wants to use the bindings from any other directory, it is recommended that the current path is added to LD_LIBRARY_PATH:

    .. code-block:: bash

        export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH


.. _SWIG: http://www.swig.org/
