Write the Fast DDS publisher
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

From the workspace, run the following command to download the HelloWorldPublisher.py file.

.. code-block:: bash

    wget -O HelloWorldPublisher.py \
        https://raw.githubusercontent.com/eProsima/Fast-RTPS-docs/master/code/Examples/Python/HelloWorld/HelloWorldPublisher.py

This is the Python source code for the publisher application.
It is going to send 10 publications under the topic `HelloWorldTopic`.

.. literalinclude:: /../code/Examples/Python/HelloWorld/HelloWorldPublisher.py
  :language: python
  :linenos:

Examining the code
""""""""""""""""""

At the beginning of the file we import the Fast DDS Python bindings.

.. literalinclude:: /../code/Examples/Python/HelloWorld/HelloWorldPublisher.py
   :language: python
   :lines: 20

and also the Python module generated by Fast-DDS-Gen as described in :ref:`writing_pubsub_python_datatype` section.

.. literalinclude:: /../code/Examples/Python/HelloWorld/HelloWorldPublisher.py
   :language: python
   :lines: 21

Then, the :class:`WriterListener` class is defined by inheriting from the |DataWriterListener-python-api| class.
This class overrides the default DataWriter listener callbacks, which allows the execution of routines in case of an
event.
The overridden callback |DataWriterListener::on_publication_matched-python-api|
allows the definition of a series of actions when a new DataReader
is detected listening to the topic under which the DataWriter is publishing.
The :func:`info.current_count_change` detects these changes of DataReaders that are matched to the
DataWriter.
This is a member in the |MatchedStatus-python-api| structure that allows tracking changes in the status of
subscriptions.

.. literalinclude:: /../code/Examples/Python/HelloWorld/HelloWorldPublisher.py
    :language: python
    :lines: 26-44

The next block creates the :class:`Writer` class that implements a publisher.

.. literalinclude:: /../code/Examples/Python/HelloWorld/HelloWorldPublisher.py
   :language: python
   :lines: 47

The publisher's initialization member function of the :class:`Writer` class are defined below.
This function performs several actions:

1.  Uses the |DomainParticipantFactory-python-api| to create the participant.
2.  Registers the data type defined in the IDL.
3.  Creates the topic for the publications.
4.  Creates the publisher.
5.  Creates the DataWriter with the listener previously created.

.. literalinclude:: /../code/Examples/Python/HelloWorld/HelloWorldPublisher.py
    :language: python
    :lines: 50-76
    :dedent: 4

To make the publication, the public member function :func:`write()` is implemented.
This is simply the `writing` of a change by the DataWriter object.

.. literalinclude:: /../code/Examples/Python/HelloWorld/HelloWorldPublisher.py
   :language: python
   :lines: 79-85

To detect when a DataReader has matched, the public member function :func:`wait_discovery` is implemented.
In the DataWriter's listener callback which states that the DataWriter has matched with a DataReader
that listens to the publication topic, the data member ``_matched_reader`` is updated.
It contains the number of DataReaders discovered.
Therefore, when the first DataReader has been discovered, the application starts to publish.

.. literalinclude:: /../code/Examples/Python/HelloWorld/HelloWorldPublisher.py
    :language: python
    :lines: 88-93
    :dedent: 4

The public *run* function waits until a DataReader is discovered and executes the action of publishing 10 samples.

.. literalinclude:: /../code/Examples/Python/HelloWorld/HelloWorldPublisher.py
    :language: python
    :lines: 96-101
    :dedent: 4

Finally, the Writer is initialized and run in main.

.. literalinclude:: /../code/Examples/Python/HelloWorld/HelloWorldPublisher.py
    :language: python
    :lines: 110-114
