.. include:: ../../../03-exports/aliases.include
.. include:: ../../../03-exports/aliases-api.include

.. _use-case-remote-type-discovery-and-matching:

Remote type discovery and endpoint matching
===========================================

This section explains how to create an endpoint using a remotely discovered data type that was previously unknown to the
local participant.

Prerequisites
-------------

This use case is focused on the strategy that has to be followed in order to create an endpoint in runtime in a
previously unknown topic using the information provided by the remote endpoint discovery information.
Therefore, the prerequisites are:

.. TODO: third prerequiste will be obsolete once the DynamicTypes defined using the Dynamic Language Binding are
   able to be registered into TypeObjectRegistry.

* Two participants, A and B, running in different process (type information is shared within the same
  DomainParticipantFactory).
* Participant A must not know the data type registered in participant B.
* Participant B data type must be registered using the code generated by
  :ref:`eProsima Fast DDS-Gen<fastddsgen_intro>` without disabling the TypeObjectSupport code generation.
* Participant B must create an endpoint using the data type unknown by participant A.
* Participant A must be attached to a :ref:`dds_layer_domainParticipantListener`.

Remote type discovery
---------------------

Following the :ref:`participant discovery phase <disc_phases>`, the endpoint information is exchanged.
The corresponding |DomainParticipantListener::on_data_reader_discovery-api| or
|DomainParticipantListener::on_data_writer_discovery-api| callback will be called, depending on the kind of endpoint
created on the remote participant.
The endpoint discovery callback provides access to the remote discovered information which includes the
|TypeInformation|.

Provided the :code:`TypeInformation`, |ITypeObjectRegistry-api| singleton can be queried for the corresponding
|TypeObject| calling |ITypeObjectRegistry::get_type_object| API.

Register remote type
--------------------

|DynamicTypeBuilderFactory-api| provides a specific API that given a |TypeObject| returns the corresponding
|DynamicTypeBuilder-api|: |DynamicTypeBuilderFactory::create_type_w_type_object|.
The DynamicType can then be obtained and registered using |DynamicPubSubType-api|.

Example
-------

The following snippet shows the previously explained steps:

.. literalinclude:: /../code/DDSCodeTester.cpp
     :language: c++
     :start-after: //!--REMOTE_TYPE_MATCHING
     :end-before: //!--
