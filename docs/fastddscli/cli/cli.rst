.. include:: ../../03-exports/aliases-api.include
.. include:: ../../03-exports/roles.include

.. _ffastddscli_cli:

CLI
===

The *Fast DDS* command line interface provides a set commands and sub-commands to perform, *Fast DDS*
related, maintenance and configuration tasks.

.. contents::
    :local:
    :backlinks: none
    :depth: 2

An executable file for Linux and Windows that runs the *Fast DDS CLI* application is
available in the `tools` folder.
If the `tools/fastdds` folder path is added to the ``PATH``, or by sourcing the `<path/to/fastdds>/install/setup.bash`
configuration file, *Fast DDS CLI* can be executed running the following commands:

- Linux:

    .. code-block:: bash

        $ fastdds <command> [<command-args>]

-  Windows:

    .. code-block:: bash

        > fastdds.bat <command> [<command-args>]

There are three verbs whose functionality is described in the following table:

+--------------------------+-------------------------------------------------------------------------------------------+
| Verbs                    | Description                                                                               |
+==========================+===========================================================================================+
| ``discovery``            | Launches a server for :ref:`Discovery Server <discovery_server>`.                         |
+--------------------------+-------------------------------------------------------------------------------------------+
| ``shm``                  | Allows manual cleaning of garbage files that may be generated by                          |
|                          | :ref:`transport_sharedMemory_sharedMemory`                                                |
+--------------------------+-------------------------------------------------------------------------------------------+
| ``xml``                  | Checks if a xml profile is well formed.                                                   |
+--------------------------+-------------------------------------------------------------------------------------------+

.. _cli_discovery:

discovery
---------

This command provides a simple and direct way to launch a *Fast DDS* :ref:`Discovery Server <discovery_server>`.
It encompasses two main functionalities:

* **Discovery Server CLI Easy Mode**: It launches a background daemon which will automatically handle the
  creation of servers.
  The port of each server is calculated based on the Domain ID (``-d`` argument or ``ROS_DOMAIN_ID``), which is the
  only parameter that the user must specify.
  If no Domain ID is provided, the default value is 0.

  It is intended to be used along with the ``ROS2_EASY_MODE`` environment variable, which will manage clients
  connections automatically.
  This CLI feature allows the user to dynamically manage servers from the network: launching, stopping, restarting
  and even modifying their remote servers connections.
  For further information about this mode refer to `Discovery Server Easy Mode <https://docs.vulcanexus.org/en/latest/rst/enhancements/easy_mode/easy_mode.html>`__.

* **Discovery Server CLI Standard Mode**: It launches a server running in foreground with the specified parameters.
  Configurable parameters include IP address, port, transport protocol, XML profile, etc.
  In this mode, *clients* must know how to reach the *server*, which is accomplished by specifying an IP address,
  a port and a transport protocol like UDP or TCP.
  *Servers* do not need any prior knowledge of their *clients*, but require the listening IP address and port
  where they may be reached.

.. _cli_discovery_easy_mode:

Discovery Server CLI Easy Mode
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This mode aims to simplify the deployment and configuration of *Fast DDS* Discovery Servers by automatically handling
the server's connections.
This mode of the CLI is meant to be used along with the ``ROS2_EASY_MODE`` environment variable, which can be used to
remove to **multicast announcements** from DDS entities and interconnect different hosts by just using the environment
variable ``ROS2_EASY_MODE=<ip>``.
(Check `Discovery Server Easy Mode <https://docs.vulcanexus.org/en/latest/rst/enhancements/easy_mode/easy_mode.html>`__
to see a detailed explanation of this feature).

In this way, the CLI provides an auxiliary tool to obtain more advanced configuration for specific cases of use.
It can be used to manage running servers, modifying their remote connections, restarting them or stopping them.
*Fast DDS* Discovery servers are handled and monitored from a background daemon which is automatically spawned when
required.

Configuration of servers launched with ``ROS2_EASY_MODE`` is available by using the following command:

.. code-block:: bash

    fastdds discovery <command> [optional -d <domain>] [optional "<remote_server_list>"]

The following table lists the available commands for the *Fast DDS* Discovery Server CLI:

.. list-table::
    :header-rows: 1
    :align: left

    * - Command
      - Description
    * - auto
      - Handle the daemon start-up automatically and creates a Discovery Server in the specified
        |br| domain (0 by default).
    * - start
      - Start the Discovery Server daemon with the remote connections specified. |br|
        (Example: start -d 1 "127.0.0.1:2;10.0.0.3:42").
    * - stop
      - Stop the Discovery Server daemon if it is executed with no arguments.
        If a domain is |br| specified with the ``-d`` argument it will only stop the corresponding server and the
        daemon |br| will remain alive.
    * - add
      - Add new remote Discovery Servers to the local server.
        This will connect both servers and |br| their sub-networks without modifying existing remote servers. |br|
        Example to add two new remote servers: add -d 7 "127.0.0.1:2;10.0.0.3:42".
    * - set
      - Rewrite the remote Discovery Servers connected to the local server.
        This will replace |br| existing remote servers with the new connections. |br|
        Example to replace remote servers with a new one: set -d 5 "10.0.0.3:42".
    * - list
      - List local active Discovery Servers created with the CLI Tool or the ``ROS2_EASY_MODE=<ip>``.

.. list-table::
    :header-rows: 1
    :align: left

    * - Option parameters
      - Description
    * - ``-d  --domain``
      - Selects the domain of the server to target for this action.
        It defaults to 0 if |br| this argument is missing and no value is found in the ``ROS_DOMAIN_ID``
        environment variable.
    * - ``<remote_server_list>``
      - It is only accepted with the `start`, `add` and `set` commands.
        It is a list of |br| remote servers to connect to that follows this structure: "<IP:domain>;<IP:domain>;...".

.. _easy_mode_discovery_examples:

Examples
""""""""

1.  Start a DS in the default domain 0:

    .. code-block:: bash

        fastdds discovery auto

2.  Stop all running DS and shut down Fast DDS daemon:

    .. code-block:: bash

        fastdds discovery stop

3.  Stop DS running in domain 0:

    .. code-block:: bash

        fastdds discovery stop -d 0

4.  Start a DS in the domain 42:

    .. code-block:: bash

        fastdds discovery auto -d 42

    OR

    .. code-block:: bash

        ROS_DOMAIN_ID=42 fastdds discovery auto

5.  Start a DS in domain 4 pointing to remote DS in domain 4:

    .. code-block:: bash

        fastdds discovery start -d 4 10.0.0.7:4

6.  Add a new remote server to DS running in domain 4 :

    .. code-block:: bash

        fastdds discovery add -d 4 10.0.0.7:4

7.  List all servers running locally:

    .. code-block:: bash

        fastdds discovery list

8.  Starts a DS in domain 3 pointing to local DS in domain 6:

    .. code-block:: bash

        fastdds discovery start -d 3 127.0.0.1:6

.. _cli_discovery_cli:

Discovery Server CLI Standard Mode
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This mode allows the user to deeply customize Discovery Servers initialization avoiding programming.
However, it requires manual configuration for clients to reach the server, as they must know the server's
IP address, port and protocol.
For more information on the different *Fast DDS* discovery mechanisms and how to configure them, please refer to
:ref:`discovery`.

To use this mode, execute on a shell:

.. code-block:: bash

    fastdds discovery [optional parameters]

The following table lists the available parameters for the *Fast DDS* Discovery Server CLI mode:

+--------------------------+-------------------------------------------------------------------------------------------+
| Option                   | Description                                                                               |
+==========================+===========================================================================================+
| ``-h  --help``           | Produce help message with examples.                                                       |
+--------------------------+-------------------------------------------------------------------------------------------+
| ``-l  --udp-address``    | IPv4/IPv6 address chosen to listen the clients using UDP transport. Defaults to any |br|  |
|                          | (0.0.0.0/::0). Instead of an address, a DNS domain name can be specified.                 |
+--------------------------+-------------------------------------------------------------------------------------------+
| ``-p  --udp-port``       | UDP port chosen to listen the clients. Defaults to '11811'. Only one server can be |br|   |
|                          | configured using the default UDP port.                                                    |
+--------------------------+-------------------------------------------------------------------------------------------+
| ``-t  --tcp-address``    | IPv4/IPv6 address chosen to listen the clients using TCP transport. Instead of an |br|    |
|                          | address, a DNS domain name can be specified. Defaults to any (0.0.0.0).                   |
+--------------------------+-------------------------------------------------------------------------------------------+
| ``-q  --tcp-port``       | TCP port chosen to listen the clients. Defaults to '42100'. Only one server can be |br|   |
|                          | configured using the default TCP port.                                                    |
+--------------------------+-------------------------------------------------------------------------------------------+
| ``-b  --backup``         | Creates a BACKUP *server* (see :ref:`discovery_protocol`)                                 |
+--------------------------+-------------------------------------------------------------------------------------------+
| ``-x  --xml-file``       | XML configuration file (see :ref:`xml_profiles`). In this case, the default |br|          |
|                          | configuration file is not loaded. The CLI options override XML configuration for |br|     |
|                          | that specific parameter. The default profile in the XML file is loaded except if |br|     |
|                          | a specific profile name is specified: ``profile_name@xml_file``                           |
+--------------------------+-------------------------------------------------------------------------------------------+
| ``-i  --server-id``      | Unique server identifier. Its functionality its deprecated. It can be used to select |br| |
|                          | a fixed GUID in the form shown below. Must be an integer in range [0, 255].               |
+--------------------------+-------------------------------------------------------------------------------------------+

Executing the command without parameters will launch a *server* with default UDP values.

The output is:

.. code-block:: bash

    #### Server started ####
      GUID prefix: <Default>|44.53.<server-id-in-hex>.5f.45.50.52.4f.53.49.4d.41
      Running on:  UDPv4:[<ip-address>]:<port>
                   UDPv6:[<ip-address>]:<port>
                   TCPv4:[<ip-address>]:<physical-port>-<logical-port>
                   TCPv6:[<ip-address>]:<physical-port>-<logical-port>

Once the *server* is instantiated, the *clients* can be configured either programmatically or by XML (see
:ref:`discovery_server`), or using environment variable ``ROS_DISCOVERY_SERVER`` (see
:ref:`env_vars_ros_discovery_server`)

.. important::
    It is possible to interconnect *servers* (or *backup* servers) instantiated with :ref:`cli_discovery_cli` using
    environment variable ``ROS_DISCOVERY_SERVER`` (see :ref:`env_vars_ros_discovery_server`) or a XML configuration
    file.

.. note::
  The :ref:`security` configuration of the discovery server should be done through XML.
  See example below.

.. _cli_discovery_examples:

Examples
""""""""

1.  Launch a **default server** listening on all available interfaces on UDP port '11811'.
    Only one server can use default values per machine.

    .. code-block:: bash

        fastdds discovery

    Output:

    .. code-block:: bash

        #### Server started ####
          GUID prefix: <Default GUID>
          Running on:  UDPv4:[0.0.0.0]:11811

2.  Launch a default server listening on localhost with UDP port 14520.
    Only localhost clients can reach the server defining as `ROS_DISCOVERY_SERVER=127.0.0.1:14520`.

    .. code-block:: bash

        fastdds discovery -l 127.0.0.1 -p 14520

    Output:

    .. code-block:: bash

        #### Server started ####
          GUID prefix: <Default GUID>
          Running on:  UDPv4:[127.0.0.1]:14520

    This same output can be obtained loading the following XML configuration file ``DiscoveryServerCLI.xml``:

    .. literalinclude:: /../code/XMLTester.xml
        :language: xml
        :start-after: <!-->XML-DS-CLI-XML-CONF<-->
        :end-before: <!--><-->

    .. code-block:: bash

        fastdds discovery -x [PATH_TO_FILE]/DiscoveryServerCLI.xml

3.  Launch a default server listening on all available interfaces on TCP port '42100'.
    Only one server can use default values per machine.

    .. code-block:: bash

        fastdds discovery -t

    Output:

    .. code-block:: bash

        #### Server started ####
          GUID prefix: <Default GUID>
          Running on:  TCPv4:[0.0.0.0]:42100

.. _Deprecated_CLI: https://fast-dds.docs.eprosima.com/en/v2.14.0/fastddscli/cli/cli.html

4.  Launch a default server with GUID corresponding to id 1 (see `Deprecated_CLI`_)
    listening on IPv6 address ``2a02:ec80:600:ed1a::3`` with UDP port 14520.

    .. code-block:: bash

        fastdds discovery -i 1 -l 2a02:ec80:600:ed1a::3 -p 14520

    Output:

    .. code-block:: bash

        #### Server started ####
          GUID prefix: 44.53.01.5f.45.50.52.4f.53.49.4d.41
          Running on:  UDPv6:[2a02:ec80:600:ed1a::3]:14520

5.  Launch a default server listening on WiFi (192.168.36.34) and Ethernet (172.20.96.1)
    local interfaces with UDP ports 8783 and 51083 respectively
    (addresses and ports are made up for the example).

    .. code-block:: bash

        fastdds discovery -l 192.168.36.34 -p 8783 -l 172.20.96.1 -p 51083

    Output:

    .. code-block:: bash

        #### Server started ####
          GUID prefix: <Default GUID>
          Running on:  UDPv4:[192.168.36.34]:8783
                       UDPv4:[172.20.96.1]:51083

    Using the same XML configuration file from the second example, the same
    output can be obtained loading a specific profile: `second_participant_profile_discovery_server_cli`.

    .. code-block:: bash

        fastdds discovery -x second_participant_profile_discovery_server_cli@[PATH_TO_FILE]/DiscoveryServerCLI.xml

6.  Launch a default server listening on 172.30.144.1 with UDP port 12345 and provided with a
    backup file. If the server crashes it will automatically restore its previous state when re-enacted.

    .. code-block:: bash

        fastdds discovery -l 172.30.144.1 -p 12345 -b

    Output:

    .. code-block:: bash

        #### Backup Server started ####
          GUID prefix: <Default GUID>
          Running on:  UDPv4:[172.30.144.1]:12345

7.  Launch a secure server listening on all available interfaces on UDP port '11811'.

    .. code-block:: bash

        fastdds discovery -x secure_discovery_server_cli@[PATH_TO_FILE]/DiscoveryServerCLI.xml

    Output:

    .. code-block:: bash

        #### Server started ####
          GUID prefix: <Default GUID>
          Running on:  UDPv4:[0.0.0.0]:11811

8.  Launch a server reading specific `profile_name` configuration from XML file.

    .. code-block:: bash

        fastdds discovery -x profile_name@[PATH_TO_FILE]/config.xml

    Output:

    .. code-block:: bash

        #### Server started ####
          GUID prefix: <Default GUID>
          Running on:  UDPv4:[127.0.0.1]:56542

9.  Launch a server listening on localhost on default TCP port '42100'.

    .. code-block:: bash

        fastdds discovery -t 127.0.0.1

    Output:

    .. code-block:: bash

        #### Server started ####
          GUID prefix: <Default GUID>
          Running on:  TCPv4:[127.0.0.1]:42100-42100

10. Launch a server listening on localhost and WiFi (192.163.6.34). Two TCP ports need to be
    specified because transports cannot share ports.

    .. code-block:: bash

        fastdds discovery -t 127.0.0.1 -q 42100 -t 192.163.6.34 -q 42101

    Output:

    .. code-block:: bash

        #### Server started ####
          GUID prefix: <Default GUID>
          Running on:  TCPv4:[127.0.0.1]:42100-42100
                       TCPv4:[192.163.6.34]:42101-42101

.. note::
     When using Discovery Server over TCP, the first port shown in the output
     refers to the TCP Physical port and the second one to the TCP Logical
     port (see :ref:`transport_tcp_tcp`).

.. note::
     A server can be instantiated just by passing the port arguments ``-p``
     and ``-q``. Fast DDS CLI will use the default values of the IP addresses,
     that is, ``0.0.0.0`` for both UDP and TCP.

.. _cli_shm:

shm
---

Provides maintenance tasks related with :ref:`transport_sharedMemory_sharedMemory`. Shared Memory transport creates
:ref:`Segments<transport_sharedMemory_concepts_segment>`, blocks of memory accessible from different processes.
Zombie files are memory blocks that were reserved by shared memory and are no longer in use which take up valuable
memory resources.
This tool finds and frees those memory allocations.

It is also possible to clean :ref:`Data Sharing<datasharing-delivery>` segments when the ``--force`` option is used.
However, this option should be used with caution, as it will remove all Data Sharing segments, including the ones
that are being used by active applications.

.. code-block:: bash

    fastdds shm [<shm-command>]

+--------------------------+-------------------------------------------------------------------------------------------+
| Sub-command              | Description                                                                               |
+==========================+===========================================================================================+
| ``clean``                | Cleans SHM zombie files.                                                                  |
+--------------------------+-------------------------------------------------------------------------------------------+

+--------------------------+-------------------------------------------------------------------------------------------+
| Option                   | Description                                                                               |
+==========================+===========================================================================================+
| ``-h  --help``           | Produce help message.                                                                     |
+--------------------------+-------------------------------------------------------------------------------------------+
| ``-f  --force``          | Force the deletion of data sharing segments.                                              |
+--------------------------+-------------------------------------------------------------------------------------------+

.. warning::
     Running this command with the ``--force`` option will remove all Data Sharing segments, including the ones that
     are being used by active applications. Use this option only when there are no running Fast DDS applications,
     as it might raise errors if the segments are still in use.

.. _cli_xml:

xml
---

Checks if a given xml profile is well formed, by matching it against a XSD schema.
If the given input to the command is a path to a folder instead of a path to a file,all xml files contained in the
folder will be validated.

This validation consists in checking the lack of parameters, values bounds, expected values data types and main profile
structure. For further information see :ref:`making_xml_profiles`.


.. code-block:: bash

    fastdds xml [<xml-command>]

+--------------------------+-------------------------------------------------------------------------------------------+
| Sub-command              | Description                                                                               |
+==========================+===========================================================================================+
| ``validate``             | Checks a xml profile by matching it against a XSD schema.                                 |
+--------------------------+-------------------------------------------------------------------------------------------+

+--------------------------+-------------------------------------------------------------------------------------------+
| Option                   | Description                                                                               |
+==========================+===========================================================================================+
| ``-h  --help``           | Produce help message.                                                                     |
+--------------------------+-------------------------------------------------------------------------------------------+
| ``-d  --debug``          | Print debug information (disabled by default)                                             |
+--------------------------+-------------------------------------------------------------------------------------------+
| ``-x  --xsd_file``       | XSD schema for validation (not required, Fast DDS schema is used by default)              |
+--------------------------+-------------------------------------------------------------------------------------------+

**Example**

.. code-block:: bash

    fastdds xml validate my_profile.xml

