.. _fastddsgen_rpc_code_generation_advanced_example:

Generating *Fast DDS* source code for data streaming
----------------------------------------------------

*eProsima Fast DDS-Gen* tool supports data streaming using the ``@feed`` builtin annotation.
The purpose of this example is to show how to create an IDL interface for data streaming
and understand the files generated by the tool.

The example consists of a calculator service that extends the interface
of the :ref:`basic example <fastddsgen_rpc_code_generation_basic_example>`
with new operations that make use of the ``@feed`` annotation:

* **fibonacci_seq**: Returns a feed of results with the n_results first elements of the Fibonacci sequence.
* **sum_all**: Returns the sum of all the received values through a feed when it is closed.
* **accumulator**: Returns a feed of results with the sum of all received values.
* **filter**: Returns a feed of results with the received values that match an input filter.

Creating the IDL file with the interface
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The operations of the calculator service should be specified in an IDL file using an interface and
following the syntax explained in :ref:`fastddsgen_interfaces_definition`.

To define this interface, create a *calculator.idl* file in the *CalculatorAdvanced* directory
with the following content:

.. code-block:: omg-idl

    // calculator.idl
    module calculator_example
    {
        // This exception will be thrown when an operation result cannot be represented in a long
        exception OverflowException
        {
        };

        // For the filter operation
        enum FilterKind
        {
	    EVEN,  // return even numbers
            ODD,   // return odd numbers
            PRIME  // return positive prime numbers
        };

        interface Calculator
        {
            // Returns the minimum and maximum representable values
            void representation_limits(out long min_value, out long max_value);

            // Returns the result of value1 + value2
            long addition(in long value1, in long value2) raises (OverflowException);

            // Returns the result of value1 + value2
            long subtraction(in long value1, in long value2) raises (OverflowException);

            // Returns a feed of results with the n_results first elements of the Fibonacci sequence
            // E.g. for an input of 5, returns a feed with {1, 1, 2, 3, 5}
            @feed long fibonacci_seq(in unsigned long n_results) raises (OverflowException);

            // Waits for an input feed to finish and returns the sum of all the received values
            // E.g. for an input of {1, 2, 3, 4, 5} returns 15
            long sum_all(@feed in long value) raises (OverflowException);

            // Returns a feed of results with the sum of all received values
            // E.g. for an input of {1, 2, 3, 4, 5}, returns a feed with {1, 3, 6, 10, 15}
            @feed long accumulator(@feed in long value) raises (OverflowException);

            // Returns a feed of results with the received values that match the input filter kind
            @feed long filter(@feed in long value, in FilterKind filter_kind);
        };
    };


Similarly to the basic example, operations that imply some kind of arithmetic operation on the data
can raise an ``OverflowException`` in case of numbers exceeding the limits of the ``long`` type.

Note that the new operations are defined with the ``@feed`` annotation,
and it is specified on a return type or an *in* parameter.
On one hand, adding ``@feed`` to the return type means that the client
expects multiple results from the server (more expecifically,
an unbounded number of results before the server closes the feed), *i.e*, multiple replies to the same request.

On the other hand, adding ``@feed`` to an *in* parameter means that the client will send multiple data values
associated to the same operation parameter, and that all this values should use by the server to compute the result
of the operation. Thus, the server waits to receive all the values from the client
(*i.e:* waits to the feed to be closed by the client) before computing the result of the operation.


Generate the Fast DDS source code
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Source code can be generated in *CalculatorAdvanced* directory using the *Fast DDS-Gen* tool in the same way as in the
:ref:`basic example <fastddsgen_rpc_code_generation_basic_example_generate_source_code>`.

Files description
^^^^^^^^^^^^^^^^^
The files generated by the *Fast DDS-Gen* tool are similar to the ones generated in the
:ref:`basic example <fastddsgen_rpc_code_generation_basic_example_files_description>`.

We will only discuss the changes in each file by the addition of the new operations:

calculator
""""""""""

Note that operations with a ``@feed`` annotated return type return an object of type
``RpcClientReader<return_type>``, instead of an ``RpcFuture<return_type>`` object.

Due to the fact that, when calling this kind of operations, client does not know the number of results
that will be received, it uses an ``RpcClientReader`` object to read results of type ``<return_type>``,
until the feed is closed by the server, cancelled by the client using ``RpcClientReader::cancel()`` method
(*i.e:* the client decides to stop reading results) or an error occurs.

Similarly, input ``<param_type>`` parameters with a ``@feed`` annotation have a type of
``RpcClientWriter<param_type>``. ``RpcClientWriter`` objects allow the client to send multiple values of type
``<param_type>`` to the server using the ``RpcClientWriter::write()`` method or notify the server that the feed is
finished using the ``RpcClientWriter::finish()`` method.

calculator_details
""""""""""""""""""

On one hand, additional ``<operation_name>_value_Feed`` structures are defined for each operation with a
``@feed`` annotation on an input parameter.
They contain ``value`` and ``finished`` optional members, which are used to specify a new
input value sent by the client or to notify the server that the feed is finished
(and the cause of the finish), respectively.

On the other hand, an additional ``finished_`` optional member is added
to the ``Calculator_<operation_name>_Out`` structures for operations with a ``@feed`` annotated return type,
which is used to notify the client that the output feed is finished (and the cause of the finish).

Finally, an additional ``feed_cancel_`` optional member is added to the ``Calculator_Request`` structure,
which is used to notify the server that the client has cancelled the output feed.
