Generate the Fast DDS source code from the IDL file
---------------------------------------------------

Source code can be generated in the *workspace_CalculatorFeed/types* directory using the *Fast DDS-Gen* tool
in the same way as in the :ref:`basic example <fastddsgen_rpc_calculator_basic_app_code_generation>`.

Files description
^^^^^^^^^^^^^^^^^
The files generated by the *Fast DDS-Gen* tool are similar to the ones generated in the
:ref:`basic example <fastddsgen_rpc_calculator_basic_app_code_generation>`.

We will only discuss the changes in each file by the addition of the new operations:

calculator
""""""""""

Note that operations with a ``@feed`` annotated return type return an object of type
``RpcClientReader<return_type>``, instead of an ``RpcFuture<return_type>`` object.

Due to the fact that, when calling this kind of operations, client does not know the number of results
that will be received, it uses an ``RpcClientReader`` object to read results of type ``<return_type>``,
until the feed is closed by the server, cancelled by the client using ``RpcClientReader::cancel()`` method
(*i.e:* the client decides to stop reading results) or an error occurs.

Similarly, input ``<param_type>`` parameters with a ``@feed`` annotation have a type of
``RpcClientWriter<param_type>``. ``RpcClientWriter`` objects allow the client to send multiple values of type
``<param_type>`` to the server using the ``RpcClientWriter::write()`` method or notify the server that the feed is
finished using the ``RpcClientWriter::finish()`` method.

For more information about input and output feeds, see :ref:`rpc_data_streaming_interfaces`.

calculator_details
""""""""""""""""""

On one hand, additional ``<operation_name>_value_Feed`` structures are defined for each operation with a
``@feed`` annotation on an input parameter.
They contain ``value`` and ``finished`` optional members, which are used to specify a new
input value sent by the client or to notify the server that the feed is finished
(and the cause of the finish), respectively.

On the other hand, an additional ``finished_`` optional member is added
to the ``Calculator_<operation_name>_Out`` structures for operations with a ``@feed`` annotated return type,
which is used to notify the client that the output feed is finished (and the cause of the finish).

Finally, an additional ``feed_cancel_`` optional member is added to the ``Calculator_Request`` structure,
which is used to notify the server that the client has cancelled the output feed.
