Build the client/server interface
---------------------------------

The operations of the calculator service should be specified in an IDL file using an interface and
following the syntax explained in :ref:`fastddsgen_interfaces_definition`.

In the workspace directory, run the following commands:

.. code-block:: bash

    mkdir src && cd src
    mkdir types && cd types
    touch calculator.idl
    cd ../..

We have created a separated ``types`` subdirectory inside the workspace source directory to separate the source code
generated by *Fast DDS-Gen* from the rest of the application code. Now open the *calculator.idl* file
with a text editor and copy the following content inside it:

.. literalinclude:: /../code/Examples/C++/RpcClientServerFeed/src/types/calculator.idl
    :language: omg-idl

Similarly to the basic example, operations that imply some kind of arithmetic operation on the data
can raise an ``OverflowException`` in case of numbers exceeding the limits of the ``long`` type.

Note that the new operations are defined with the ``@feed`` annotation,
and it is specified on a return type or an *in* parameter.
On one hand, adding ``@feed`` to the return type means that the client
expects multiple results from the server (more specifically,
an unbounded number of results before the server closes the feed), *i.e*, multiple replies to the same request.

On the other hand, adding ``@feed`` to an *in* parameter means that the client will send multiple data values
associated to the same operation parameter, and that all these values should be used by the server to compute the result
of the operation. Thus, the server waits to receive all the values from the client
(*i.e:* waits to the feed to be closed by the client) before computing the result of the operation.
